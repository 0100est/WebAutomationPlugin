
I. Tipuri de noduri de navigare:
--------------------------------------------------------------
- noduri de inceput, de nivel superior (nivel 3): noduri de tip meniu care duc la documente web 
care contin elemente clickabile care duc spre concepte
- noduri intermediare de legatura (nivel 2) : un nod care duce de la un nod de inceput sau
nod intermediar de legatura spre un nod pre-frunza (aceste noduri spre deosebire de nodurile de nivel 1
nu sunt legate de nici un concept)
- noduri intermediare pre-frunza (nivel 1) : care sunt legate de un concept; acestea sunt de doua tipuri
        o noduri care duc la un concept general (e.g. buton de INSERT pentru o entitate,
        buton se SELECT ALL pentru o entitate)
        o noduri care sunt legate de entitati specifice (e.g. buton/link de UPDATE pentru
        editare o instanta specifica, buton/link de DELETE pentru delete o instanta specifica, 
        buton/link de SELECT o instanta specifica) 
        IMPORTANT: aici vor fi mai multe noduri legate de entitati de obicei aceste noduri/linkuri 
        sunt afisate intr-un tabel (sau lista de Issue-uri in cazul Jira), cate o entitate pe 
        linie; trebuie sa fie salvat/reprezentat un singur nod generic (link, buton) pentru toate 
        aceste linii de tabel/lista si trebuie cumva identificata entitatea corespunzatoare 
        (probabil valorile textuale afisate in linia respectiva, iar aceste valori de atribute 
        trebuie asociate cu nume de atribute din capul de tabel)
- noduri frunza (nivel 0) : un concept (tabel) sau o entitate a unui concept (row/record din tabel)
plus o operatie (SELECT ALL, SELECT, INSERT, UPDATE, DELETE)

Observatie: Generalizare - un nod pre-frunza poate duce la un nod frunza sau alt nod frunza
in functie de un context stabilit anterior.

Un segment de harta cu noduri de mai sus este urmatorul:
Nod3 -> Nod2 -> Nod2 -> ... -> Nod2 -> Nod1 -> Nod0
Nod3 -> Nod1 -> Nod0

====================================================================================================


2. ID-uri unice pentru butoane/link-uri:
----------------------------------------------------
- generate din requesturi XHR
        o PRO : ar trebui sa identifice acelasi buton in mai multe pagini web
        o CONS : in cazul Microsoft CRM sunt mari cererile (Microsoft Dynamics 365 nu foloseste
        cereri XHR ci websockets); oricum, numai cu cererea XHR, robotul nu poate genera contentul
        decat greu fara DOM - i.e. robotul tot trebuie sa trimita cererea XHR la server direct din DOM
- generate din DOM  (complet) : calea completa spre tagul top level al sectiunii de DOM updatata (i.e.
cea care nu are atributul custom "taskmateID") - pare OK.
- generate din DOM (ancora ca la UiPath) : trebuie ales manual de user, nu e destul de robust

====================================================================================================


3. Algoritm detectie block primar de navigare cu 2 componente: [Nod pre-frunza] -> [Nod frunza] pt. operatiile SELECT, INSERT, UPDATE.
----------------------------------------------------------------------------------------------
Deocamdata ignoram operatiile SELECT ALL si DELETE si consideram doar SELECT, INSERT, UPDATE.
Algoritm de detectie si reprezentare a unui block primar de navigare cu 2 componente de tipul: 
[Nod pre-frunza] -> [Nod frunza]
unde [Nod frunza] = [Concept : Operatie], Operatie = {SELECT, INSERT, UPDATE}
si [Nod pre-frunza] = ID-ul buton/link care duce la nodul frunza. Acest ID reprezinta
calea (path) in DOM de la buton/link pana la tagul html de cel mai inalt nivel din DOM-ul din
care face parte butonul/linkul, DOM care a fost updatat in urma unei operatii pe UI
(i.e. DOM-ul care cuprinde taguri fara atributul custom "taskmateID"; daca toate tagurile
nu au acest atribut custom, deci suntem pe pagina html principala, atunci path-ul merge pana
la <body>).
Algoritmul este urmatorul:
1) Utilizatorul uman face click pe buton/link-ul respectiv
2) Un hook ajuta pluginul sa se prinda, dupa ce detecteaza o cerere XHR, care buton/click 
a fost apasat de catre utilizatorul uman si salveaza ID-ul acestui buton/click in local storage.
[document.addEventListener('click', function(event) { console.log("Forest", event)});]
3) Pluginul retine reprezentarea (path in DOM) a nodului pre-frunza de la punctul 2)
4) Dupa alarm-ul de 1 minut rezultat in urma cererilor XHR, plugin-ul cauta conceptul
(i.e. atributele lui) in DOM-ul updatat [asta s-a implementat deja in sprintul precedent].
Asa se detecteaza conceptul
5) Pentru detectia operatiei (SELECT, INSERT, UPDATE), pluginul face urmatoarele:
- acolo unde detecteaza un atribut textual al conceptului in DOM (acest atribut va fi un label),
trebuie sa gasim si un "<input type=text>|<select>|<textarea>" in apropierea acestul atribut 
textual (i.e. text inputul legat de acest label); tag-ul de input va trebui cautat intr-un cerc 
in jurul acestui label in documentul randat in browser (de obicei inputul se va afla in dreapta 
label-ului, in aceeasi linie sau dedesubtul lui; cautam inputul in cadranul Sud-Est al atributului 
textual); detectam astfel toate input-urile sau text area sau select-urile asociate fiecarui atribut 
textual al conceptului detectat.
- daca nu gasim nici un astfel de control de input (e.g. input type text, text area, select),
inseamna ca operatia este SELECT.
- daca gasim controale de input si daca aceste input-uri nu au valoare (sunt goale), operatia este INSERT
- altfel, daca cel putin un astfel de input are valoare, operatia e UPDATE


4. Algoritm de detectie si reprezentare a unui block primar de navigare cu 2 componente pentru operatia SELECT ALL (tabel)
-------------------------------------------------------------------------------------------------------
Algoritmul trebuie sa detecteze aranjarea elementelor textuale intr-un tabel (pt. Microsoft Dynamics 2016 CRM) sau o lista (Jira); aceste elemente textuale din tabel pot include 
nume de atribute din DataModel (ca si cap de tabel).
Algoritmul de detectie aranjare elemente textuale in tabel:
1) Fie C = vectorul cu noduri textuale (noduri/taguri ce contin inner text)
2) Clusterizam elementele din C in functie de pozitia lor pe axa OY (adica
elem.getBoundingClientRect().top) plus/minus un threshold Thresh = 10px.
Adica elementele textuale T1 si T2 sunt in aceeasi cluster (i.e. pe aceeasi linie)
daca T1.getBoundingClientRect().top = T2.getBoundingClientRect().top +/- 10px.
Clusterizarea liniilor se face sortand nodurile textuale dupa pozitia Top a lor.
3) Fiecare astfel de cluster/linie il highlight-uiesti cu un border de culoare albastru;
Daca toate acele elemente textuale dintr-o linie/cluster au border-bottom atunci
highlight-uiesti linia cu un border de culoare verde; Daca toate acele elemente 
textuale dintr-o linie/cluster sunt de fapt nume de atribute din DataModel, atunci
highlight-uiesti linia cu un border de culoare rosie; 
4) Apoi clusterizam elementele din C in functie de pozitia lor pe axa OX (adica
elem.getBoundingClientRect().top) plus/minus un threshold Thresh = 10px. Un cluster
va reprezenta o coloana. Clusterizarea coloanelor se face sortand nodurile textuale 
dupa pozitia Left a lor.
5) In final faci unul sau mai multe mega-clustere formate din clusterele-linii 
si clusterele-coloane detectate la punctele 2-4. Un mega-cluster este de fapt 
un tabel si contine linii pentru care intre doua linii succesive avem: 
Linia1.getBoundingClientRect().bottom = Linia2.getBoundingClientRect().top + offset, 
unde offset este un numar intre 0px si (height of a line)/2 pixels.
Pentru formarea unui mega-cluster (i.e. tabel) din vectorul de clustere-linii si
vectorul de clustere-coloane, se parcurge fiecare element text din C si se calculeaza
din ce cluster-linie si ce cluster-coloana face parte. Apoi se formeaza tabelul
luand pe rand toate nodurile text din linia 0, coloana 0, coloana 1, coloana 2, ...
Apoi se iau toate nodurile text din linia 1, coloana 0, coloana 1, coloana 2, ...
Apoi se iau toate nodurile text din linia 2 si tot asa pana nu mai sunt clustere-linii. 




Functii javascript DOM utile:
window.getComputedStyle(element).[top|bottom|left|right]
elem.getBoundingClientRect().[top|bottom|left|right]
elem.style.border (borderLeft, borderRight, borderTop, borderBottom)

4. Algoritm de detectie si reprezentare a unui block primar de navigare cu 2 componente pentru operatia DELETE
-------------------------------------------------------------------------------------------------------
Algoritmul e strans legat de algoritmul precedent de detectie tabel (operatia SELECT ALL) si contine 
urmatorii pasi:
1) Dupa ce am detectat un tabel care cuprinde cate o entitate pe linie, cautam in fiecare linie
un element <input type="checkbox"> (daca e hidden, il facem vizibil si ii setam pozitia absoluta
sa fie egala cu pozitia pe ecran a celui mai apropiat stramos al lui cu display:none sau 
visibility:hidden)
2) Daca am gasit checkboxul pe fiecare linie, cautam un element clickabil in tot ecranul
care are innerText textul "DELETE" (TODO: dupa ce avem serviciul extern de recunoastere
iconuri, cautam si un element clickabil cu iconita de recycle bin pe el).
Observatie: Element clickabil inseamna: input (<input type="button">,<button>,<a>) si orice alt
element DOM care are handler de onClick()
3) Daca am gasit si checkbox-ul si butonul DELETE, salvam blockul primar de navigare DELETE:
[Nod pre-frunza1] -> [Nod pre-frunza2] -> [Nod frunza]
unde [Nod frunza] = [Concept : DELETE], iar Conceptul e pre-determinat din tabel (l-am identificat
deja cand am identificat tabelul) si reprezinta contentul DOM cu fereastra care cere confirmare
pentru stergere. [Nod pre-frunza1] = [IDTabel, ID"<input type='checkbox'>"] si este generic
(un singur nod pentru toate entitatile din tabel). ID"<input type='checkbox'>" deoarece e 
generic pentru toate entitatile va fi calea in DOM (fara id-uri, doar tagnames si class-uri CSS)
de la checkboxul respectiv pana la IDTabel (adica pana la cel mai apropiat stramos care contine
toate tagurile care contin innerTextul din celulele tabelului).
[Nod pre-frunza2] = [IDButonDELETE] (cel care are innerText DELETE si iconita de Recycle Bin).



TODO: In viitor trebuie sa avem un serviciu extern de identificare iconite si cautam o iconita
de Recycle Bin in fiecare linie de tabel (fiecare linie corespunzand unei singure entitati din
conceptul respectiv).


====================================================================================================


Pluginul ar trebui sa scoata 2 lucruri:
- harta completa a site-ului/aplicatiei - graf
- block-uri primare/atomice (cu 2 componente) pentru operatii CRUD, de ex. :
Varianta 1: drumuri relative
[Nod1.1] -> [Nod0.1: Account - Select ALL]
[Nod1.2] -> [Nod0.2: Account - SELECT]
[Nod1.3] -> [Nod0.3: Account - INSERT]
[Nod1.4] -> [Nod0.4: Account - UPDATE]
[Nod1.5] -> [Nod0.5: Account - DELETE]

[Nod1.6] -> [Nod0.6: Lead - Select ALL]
[Nod1.7] -> [Nod0.7: Lead - SELECT]
[Nod1.8] -> [Nod0.8: Lead - INSERT]
[Nod1.9] -> [Nod0.9: Lead - UPDATE]
[Nod1.10] -> [Nod0.10: Lead - DELETE]

Varianta 2: drumuri absolute (incepand de la pagina principala)
Exemplu Block primar pentru INSERT Account:
[Nod3.1: BurgerMenu] -> [Nod2.1: Buton Sales] -> [Nod2.2: Buton Accounts] -> [Nod1.1: Buton +New] -> 
        -> [Nod0.1: Account - INSERT]

[Nod3.1: BurgerMenu] -> [Nod2.2: Buton Service] -> ...



====================================================================================================
TODO (pentru Sprinturi urmatoare):
- Detectie legaturi intre concepte/tabele in pagini web (i.e. echivalentul cheilor straine in
baze de date; legaturi: 1:1, 1:n, n:n)
- Navigarea automata in aplicatie (fara asistenta din partea userului); direct din plugin
sau cu Selenium; Navigarea automata inseamna detectie element clickabil in DOM si eventul
de click pe el; Elem. clickabil: input (<input type="button">,<button>,<a>) si orice alt
element DOM care are handler de onClick()
- Detectie intreaga harta aplicatie (nu doar building blocks cu operatii CRUD)
- [Cum sa descoperim harta aplicatiei navigand automat, dar fara sa stergem date din BD ?]
- Serviciu extern de identificare icon-uri (poze) in pagina
- Detectie automat data model in aplicatie web (sa nu mai fie dat ca input data modelul la plugin)
- Detectie parte DOM updatata pe UI (cu atributul custom [taskmateID] - nu mergea chiar bine in iframe)
- Cresterea robustetii : Detectie block primar atomic ambigu (de ex. tabel in care afiseaza 
mai multe entitati dar numai o parte din campuri, cum e la Accounts, si acolo pot sa dau 
click pe 2 entitati - randuri din tabel - si vad ca la fiecare entitate sunt afisate atributele 
entitatii din Data Model)




Idei de articole:
- Construirea de building blocks atomice de operatii pentru automatizarea unei aplicatii web de business
  [ descriem procese complexe in BPMN folosind building blocksurile atomice]
- Construirea hartii unei aplicatii web de business (harta completa, nu doar building blocks)
- Determinarea modelului de date din UI-ul aplicatiei web pentru automatizare
- Automatizari naturale ale aplicatiilor web dinamice (comenzi date in NLP)
  [ descriu cum ar functiona un robot RPA pe baza la toate lucrurile determinate mai sus ]
====================================================================================================
